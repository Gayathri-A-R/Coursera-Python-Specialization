
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_sorted_recommendations(["Bridesmaids", "Sherlock Holmes"])

import requests_with_caching
import json

def get_movies_from_tastedive(artist):
    base_url = 'https://tastedive.com/api/similar'
    param_d = {}
    param_d['q'] = artist
    param_d['limit'] = 5
    param_d["type"] = 'movies'
    response = requests_with_caching.get(base_url, params = param_d)
    response_d=response.json()
    return response_d

def extract_movie_titles(data):
    titles = [x['Name'] for x in data['Similar']['Results']]
    return titles

def get_related_titles(movies):
    movie_list=[]
    for movie in movies:
        related_movies = extract_movie_titles(get_movies_from_tastedive(movie))
        for mov in related_movies:
            if mov not in movie_list:
                movie_list.append(mov)
    return movie_list

def get_movie_data(movie):
    base = 'http://www.omdbapi.com/'
    p = {}
    p['t'] = movie
    p['r'] = 'json'
    data = requests_with_caching.get(base,params=p)
    data_d=data.json()
    return data_d

def get_movie_rating(data):
    rating =0
    for rate in data['Ratings']:
        if rate['Source'] == 'Rotten Tomatoes':
            rate_per = rate['Value']
            rate_no = rate_per.split('%')[0]
            rating = int(rate_no)
    return rating

def get_sorted_recommendations(movie_list):
    sorted_list = []
    related_movies = get_related_titles(movie_list)
    ratings = []
    for movie in related_movies:
        rating = get_movie_rating(get_movie_data(movie))
        ratings.append(rating)
    zip_list = zip(related_movies, ratings)
    sorted_zip_list = sorted(zip_list, key=lambda x: (x[1], x[0]), reverse = True)
    for pair in sorted_zip_list:
        sorted_list.append(pair[0])
    print(sorted_list)
    return sorted_list


